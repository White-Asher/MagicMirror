var Transform = require('stream').Transform;
var util = require("util");

function IsSilence(options) {
  var that = this
  if (options && options.debug) {
    that.debug = options.debug
    delete options.debug
  }
  Transform.call(that, options)
  var consecSilenceCount = 0
  var numSilenceFramesExitThresh = 0

  that.getSpeechSampleDetect= function getSpeechSampleDetect() {
    return numSpeechSampleDetect
  }

  that.getNumSilenceFramesExitThresh = function getNumSilenceFramesExitThresh() {
    return numSilenceFramesExitThresh
  }

  that.getConsecSilenceCount = function getConsecSilenceCount() {
    return consecSilenceCount
  }

  that.setSpeechSampleDetect= function setSpeechSampleDetect(numSample) {
    numSpeechSampleDetect = numSample
    return
  }

  that.setNumSilenceFramesExitThresh = function setNumSilenceFramesExitThresh(numFrames) {
    numSilenceFramesExitThresh = numFrames
    return
  }

  that.incrConsecSilenceCount = function incrConsecSilenceCount() {
    consecSilenceCount++
    return consecSilenceCount
  }

  that.resetConsecSilenceCount = function resetConsecSilenceCount() {
    consecSilenceCount = 0
    return
  }
}
util.inherits(IsSilence, Transform)

IsSilence.prototype._transform = function(chunk, encoding, callback) {
  var i
  var speechSample
  var silenceLength = 0
  var self = this
  var debug = self.debug
  var consecutiveSilence = self.getConsecSilenceCount()
  var numSilenceFramesExitThresh = self.getNumSilenceFramesExitThresh()
  var SpeechSampleDetect = self.getSpeechSampleDetect()
  var incrementConsecSilence = self.incrConsecSilenceCount
  var resetConsecSilence = self.resetConsecSilenceCount

  if(numSilenceFramesExitThresh) {
    for(i=0; i<chunk.length; i=i+2) {
      if (chunk[i+1] > 128) speechSample = (chunk[i+1] - 256) * 256
      else speechSample = chunk[i+1] * 256
      speechSample += chunk[i]

      if(Math.abs(speechSample) > SpeechSampleDetect) {
        if (debug) console.log("[LPCM16] Found: Speech")
        if (consecutiveSilence>numSilenceFramesExitThresh) self.emit('sound')
        resetConsecSilence()
        break
      } else silenceLength++
    }
    if(silenceLength == chunk.length/2) {
      consecutiveSilence = incrementConsecSilence()
      if (debug) console.log("[LPCM16] Found: Silence %d of %d", consecutiveSilence, numSilenceFramesExitThresh)
      if (consecutiveSilence === numSilenceFramesExitThresh) self.emit('silence')
    }
  }
  this.push(chunk)
  callback()
}

module.exports = IsSilence;
